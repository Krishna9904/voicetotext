import React, { useState } from "react";

const Chatbot = () => {
  const [question, setQuestion] = useState("");
  const [feedback, setFeedback] = useState("");

  const handleUserQuestion = async () => {
    if (!question.trim()) return;

    try {
      const response = await fetch("http://localhost:3001/track-question", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ question, feedback }),
      });

      const data = await response.json();
      console.log(data.message);

      setQuestion(""); // Clear question input
      setFeedback(""); // Clear feedback selection
    } catch (error) {
      console.error("Error sending question and feedback:", error);
    }
  };

  return (
    <div>
      <h1>Chatbot</h1>
      <input
        type="text"
        value={question}
        onChange={(e) => setQuestion(e.target.value)}
        placeholder="Ask a question..."
      />
      <button onClick={handleUserQuestion}>Ask</button>

      <div>
        <h4>Feedback</h4>
        <button onClick={() => setFeedback("positive")}>üëç Positive</button>
        <button onClick={() => setFeedback("negative")}>üëé Negative</button>
      </div>
    </div>
  );
};

export default Chatbot;


const express = require("express");
const Redis = require("ioredis");
const bodyParser = require("body-parser");

const app = express();
const redis = new Redis(); // Connect to Redis on localhost:6379 by default

app.use(bodyParser.json());

// API to store question count and feedback
app.post("/track-question", async (req, res) => {
  const { question, feedback } = req.body;

  if (!question) {
    return res.status(400).send({ message: "Question is required" });
  }

  try {
    const redisKey = `question:${question}`;

    // Increment question count
    await redis.hincrby(redisKey, "count", 1);

    // Increment feedback count if feedback is provided
    if (feedback === "positive") {
      await redis.hincrby(redisKey, "positive", 1);
    } else if (feedback === "negative") {
      await redis.hincrby(redisKey, "negative", 1);
    }

    res.status(200).send({ message: "Question and feedback stored successfully" });
  } catch (error) {
    console.error("Error storing question and feedback:", error);
    res.status(500).send({ message: "Error storing question and feedback" });
  }
});

// API to retrieve stats for a question
app.get("/question-stats", async (req, res) => {
  const { question } = req.query;

  if (!question) {
    return res.status(400).send({ message: "Question is required" });
  }

  try {
    const redisKey = `question:${question}`;
    const stats = await redis.hgetall(redisKey);

    res.status(200).send({
      question,
      stats: {
        count: stats.count || 0,
        positive: stats.positive || 0,
        negative: stats.negative || 0,
      },
    });
  } catch (error) {
    console.error("Error retrieving question stats:", error);
    res.status(500).send({ message: "Error retrieving question stats" });
  }
});

// Start the server
app.listen(3001, () => {
  console.log("Server running on http://localhost:3001");
});


const redis = require("redis");

// Initialize Redis client
const client = redis.createClient({
    database: 5, // Select database number 5
});

client.on("error", (err) => {
    console.error("Redis Client Error:", err);
});

(async () => {
    try {
        // Connect to Redis
        await client.connect();
        console.log("Connected to Redis on database 5");

        // Add data to Redis
        const key = "exampleKey";
        const value = "exampleValue";

        await client.set(key, value);
        console.log(`Data added: { "${key}": "${value}" }`);

        // Retrieve data from Redis
        const retrievedValue = await client.get(key);
        console.log(`Data retrieved: { "${key}": "${retrievedValue}" }`);

        // Close Redis connection
        await client.quit();
        console.log("Redis connection closed");
    } catch (err) {
        console.error("Error during Redis operation:", err);
    }
})();








